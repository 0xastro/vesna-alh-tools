#!/usr/bin/python
from vesna import alh
from vesna.alh import common
import datetime
import glob
from optparse import OptionParser
import os
import re
import sys
import time

class NodeResource: 
	def __init__(self):
		self.value = None

	def munin_write(self, outf):
		outf.write("%s.value %f\n" % (self.LABEL, self.value))

class NodeFritzBoxUptime(NodeResource):
	MUNIN_CONFIG = """graph_title FritzBox uptime
graph_args --base 1000 -l 0
graph_scale no
graph_vlabel uptime in hours
graph_category SNE
fbuptime.label = uptime
fbuptime.min = 0
"""

	LABEL = "fbuptime"

	def fetch(self, node):
		uptime = float(node.get("fritzbox/uptime").strip())
		self.value = uptime / 3600.0

class NodeUptime(NodeResource):
	MUNIN_CONFIG = """graph_title Uptime
graph_args --base 1000 -l 0
graph_scale no
graph_vlabel uptime in days
graph_category SNC
uptime.label = uptime
uptime.min = 0
"""

	LABEL = "uptime"

	def fetch(self, node):
		uptime = float(node.get("uptime").strip())

		# old version don't count uptime from 0
		old_uptime_offset = 1325376000.0
		if uptime >= old_uptime_offset:
			uptime -= old_uptime_offset

		self.value = uptime / 86400.0

class NodeMCUTemperature(NodeResource):
	MUNIN_CONFIG = """graph_title MCU temperature
graph_args --base 1000
graph_scale no
graph_vlabel degrees Celsius
graph_category SNC
mcutemp.label = mcutemp
"""

	LABEL = "mcutemp"

	def fetch(self, node):
		s = node.get("sensor/mcuTemp").strip()
		g = re.search("MCU temperature is ([0-9.]+) C", s)
		self.value = float(g.group(1))

class NodeFirmwareVersion(NodeResource):
	LABEL = "version"

	def fetch(self, node):
		hello = node.get("hello").strip()
		self.value = hello.replace("Hello Application version ", "")

class NodePingTime(NodeResource):
	MUNIN_CONFIG = """graph_title Ping time
graph_args --base 1000
graph_vlabel seconds
graph_category SNR
ping.label = ping
"""

	LABEL = "ping"

	def fetch(self, node):
		start = time.time()
		node.get("hello")
		self.value = time.time() - start

class NodeRadioStatistics(NodeResource):
	MUNIN_CONFIG = """multigraph bytes
graph_order rx tx
graph_title ZigBit traffic
graph_args --base 1000
graph_vlabel bits in (-) / out (+) per second
graph_category SNR
rx.label received
rx.type DERIVE
rx.min 0
rx.graph no
rx.cdef rx,8,*
tx.label bps
tx.type DERIVE
tx.min 0
tx.negative rx
tx.cdef tx,8,*

multigraph overflow
graph_title ZigBit buffer overflows
graph_args --base 1000
graph_vlabel lost packets per second
graph_category SNR
overflow.label overflow
overflow.type DERIVE
overflow.min 0

multigraph timeouts
graph_title ZigBit module response timeouts
graph_args --base 1000
graph_vlabel timeouts per second
graph_category SNR
timeouts.label timeouts
timeouts.type DERIVE
timeouts.min 0
"""

	LABEL = "radio"

	def fetch(self, node):
		stats = node.get("radio/statistics").strip()
		# [ tx, rx, overflows, timeouts ]
		stats = map(int, filter(lambda x:x.isdigit(), stats.split()))
		if len(stats) >= 4:
			self.value = stats

	def munin_write(self, outf):
		outf.write("""multigraph bytes
tx.value %d
rx.value %d
multigraph overflow
overflow.value %d
multigraph timeouts
timeouts.value %d
""" % (self.value[1], self.value[0], self.value[2], self.value[3]))

class MonitoredNode:
	RESOURCES = [
		NodeFirmwareVersion,
		NodePingTime,
		NodeUptime,
		NodeMCUTemperature,
		NodeRadioStatistics,
		NodeFritzBoxUptime ]

	def __init__(self, alh):
		self.alh = alh

		self.resources = dict(	(resource.LABEL, resource())
					for resource in self.RESOURCES )

	def fetch(self):
		try:
			self.alh.post("prog/firstcall", "1")
		except Exception, e:
			sys.excepthook(*sys.exc_info())
			return

		for resource in self.resources.itervalues():
			try:
				resource.fetch(self.alh)
			except Exception, e:
				sys.excepthook(*sys.exc_info())
				pass

def get_neigbors(node):
	neighbors = []

	try:
		r = node.get("radio/neighbors")
	except Exception, e:
		sys.excepthook(*sys.exc_info())
		return neighbors

	for line in r.split("\r\n"):
		fields = line.split(" | ")
		if len(fields) == 6:
			try:
				neighbors.append(int(fields[3]))
			except ValueError:
				pass

	return neighbors

def query_node(node):
	nodeinfo = MonitoredNode(node)
	nodeinfo.fetch()
	nodeinfo.neighbors = get_neigbors(node)
	return nodeinfo

def traverse_network(options):
	coordinator = common.get_coordinator(options)
	coordinator.RETRIES = 1

	queue = [0]
	visited = {}

	while queue:
		current_id = queue.pop()
		if current_id not in visited:
			if current_id == 0:
				node = coordinator
			else:
				node = alh.ALHProxy(coordinator, current_id)

			nodeinfo = query_node(node)
			visited[current_id] = nodeinfo

			for next_id in nodeinfo.neighbors:
				queue.insert(0, next_id)
	
	return visited

def do_munin(options, visited):
	refreshed = set()

	for resource in MonitoredNode.RESOURCES:
		if hasattr(resource, "MUNIN_CONFIG"):
			label = resource.LABEL

			path = "%s/config_%s" % (options.output, label)
			refreshed.add(path)

			outf = open(path, "w")
			outf.write(resource.MUNIN_CONFIG)
			outf.close()

			for current_id, nodeinfo in visited.iteritems():
				resource = nodeinfo.resources[label]
				if resource.value is not None:
					path = "%s/node_%d_%s" % (options.output, current_id, label)
					refreshed.add(path)

					outf = open(path, "w")
					nodeinfo.resources[label].munin_write(outf)
					outf.close()

	for path in glob.glob("%s/*" % (options.output,)):
		if path not in refreshed:
			os.unlink(path)

def do_stats(options, visited):
	visited = sorted((id, info) for id, info in visited.iteritems())

	print "ID\tVersion\tUptime"
	for id, nodeinfo in visited:
		uptime = nodeinfo.resources['uptime'].value
		if uptime is not None:
			uptime = datetime.timedelta(days=nodeinfo.resources['uptime'].value)

		row = [	
			id,
			nodeinfo.resources['version'].value,
			uptime,
		]

		print '\t'.join(map(str, row))

def main():
	parser = OptionParser(usage="%prog [options]")

	common.add_communication_options(parser)

	parser.add_option("-o", "--output", dest="output", metavar="PATH",
			help="PATH to write dotfile to")

	parser.add_option("-t", "--dot", dest="do_dot", action="store_true",
			help="Output a DOT file")
	parser.add_option("-m", "--munin", dest="do_munin", action="store_true",
			help="Output a directory for the Munin plug-in")
	parser.add_option("-M", "--munin-interval", dest="munin_interval", type="float",
			help="Munin polling interval")

	(options, args) = parser.parse_args()

	visited = traverse_network(options)

	if options.do_dot:

		if options.output:
			outf = open(options.output, "w")
		else:
			outf = sys.stdout

		outf.write("digraph net {\n")
		for current_id, nodeinfo in visited.iteritems():
			if nodeinfo.neighbors:
				for next_id in nodeinfo.neighbors:
					outf.write("n%d -> n%d\n" % (current_id, next_id))
		outf.write("}\n")
	elif options.do_munin:
		while True:
			do_munin(options, visited)

			if not options.munin_interval:
				break

			print "Updated ", datetime.datetime.now()

			time.sleep(options.munin_interval)
			visited = traverse_network(options)
	else:
		do_stats(options, visited)

main()
