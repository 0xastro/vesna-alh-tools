#!/usr/bin/python
from alh import alh
from alh import common
import datetime
import glob
from optparse import OptionParser
import os
import re
import sys

class NodeResource: pass

class NodeUptime(NodeResource):
	MUNIN_CONFIG = """graph_title Uptime
graph_args --base 1000 -l 0
graph_scale no
graph_vlabel uptime in days
graph_category SNC
"""

	LABEL = "uptime"

	def fetch(self, node):
		uptime = float(node.get("uptime").strip())

		# uptime doesn't start counting from 0
		uptime -= 1325376000.0

		return uptime / 86400.0

class NodeMCUTemperature(NodeResource):
	MUNIN_CONFIG = """graph_title MCU temperature
graph_args --base 1000
graph_scale no
graph_vlabel degrees Celsius
graph_category SNC
"""

	LABEL = "mcutemp"

	def fetch(self, node):
		s = node.get("sensor/mcuTemp").strip()
		g = re.search("MCU temperature is ([0-9.]+) C", s)
		return float(g.group(1))

class NodeFirmwareVersion(NodeResource):
	LABEL = "version"

	def fetch(self, node):
		hello = node.get("hello").strip()
		return hello.replace("Hello Application version ", "")

class NodeInfo: 
	RESOURCES = [
		NodeFirmwareVersion,
		NodeUptime,
		NodeMCUTemperature ]

	def __init__(self):
		self.info = {}

	def fetch(self, node):

		try:
			node.post("prog/firstcall", 1)
		except Exception, e:
			print "Fail:", e
			return

		for resource in self.RESOURCES:
			i = resource()

			try:
				self.info[i.LABEL] = i.fetch(node)
			except Exception, e:
				print "Fail:", e
				pass

def get_neigbors(node):
	neighbors = []

	try:
		r = node.get("radio/neighbors")
	except Exception, e:
		print "Fail:", e
		return neighbors

	for line in r.split("\r\n"):
		fields = line.split(" | ")
		if len(fields) == 6:
			try:
				neighbors.append(int(fields[3]))
			except ValueError:
				pass

	return neighbors

def query_node(node):
	nodeinfo = NodeInfo()
	nodeinfo.fetch(node)
	nodeinfo.neighbors = get_neigbors(node)
	return nodeinfo

def traverse_network(options):

	coordinator = common.get_coordinator(options)
	coordinator.RETRIES = 1

	queue = [0]
	visited = {}

	while queue:
		current_id = queue.pop()
		if current_id not in visited:
			if current_id == 0:
				node = coordinator
			else:
				node = alh.ALHProxy(coordinator, current_id)

			nodeinfo = query_node(node)
			visited[current_id] = nodeinfo

			for next_id in nodeinfo.neighbors:
				queue.insert(0, next_id)
	
	return visited

def do_munin(options, visited):
	refreshed = set()

	for resource in NodeInfo.RESOURCES:
		if hasattr(resource, "MUNIN_CONFIG"):
			label = resource.LABEL

			path = "%s/config_%s" % (options.output, label)
			refreshed.add(path)

			outf = open(path, "w")
			outf.write(resource.MUNIN_CONFIG)
			outf.write("%s.label %s\n" % (label, label))
			outf.close()

			for current_id, nodeinfo in visited.iteritems():
				if label in nodeinfo.info:
					value = nodeinfo.info[label]

					path = "%s/node_%d_%s" % (options.output, current_id, label)
					refreshed.add(path)

					outf = open(path, "w")
					outf.write("%s.value %f\n" % (label, value))
					outf.close()

	for path in glob.glob("%s/*" % (options.output,)):
		if path not in refreshed:
			os.unlink(path)

def do_stats(options, visited):
	visited = sorted((id, info) for id, info in visited.iteritems())

	print "ID\tVersion\tUptime"
	for id, nodeinfo in visited:
		if nodeinfo.info.get('uptime') is not None:
			uptime = datetime.timedelta(days=nodeinfo.info['uptime'])
		else:
			uptime = None

		row = [	
			id,
			nodeinfo.info.get('version'),
			uptime,
		]

		print '\t'.join(map(str, row))

def main():
	parser = OptionParser(usage="%prog [options]")

	common.add_communication_options(parser)

	parser.add_option("-o", "--output", dest="output", metavar="PATH",
			help="PATH to write dotfile to")

	parser.add_option("-t", "--dot", dest="do_dot", action="store_true",
			help="Output a DOT file")
	parser.add_option("-m", "--munin", dest="do_munin", action="store_true",
			help="Output a directory for the Munin plug-in")

	(options, args) = parser.parse_args()

	visited = traverse_network(options)

	if options.do_dot:

		if options.output:
			outf = open(options.output, "w")
		else:
			outf = sys.stdout

		outf.write("digraph net {\n")
		for current_id, nodeinfo in visited.iteritems():
			if nodeinfo.neighbors:
				for next_id in nodeinfo.neighbors:
					outf.write("n%d -> n%d\n" % (current_id, next_id))
		outf.write("}\n")
	elif options.do_munin:
		do_munin(options, visited)
	else:
		do_stats(options, visited)

main()
